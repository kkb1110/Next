// ==========================
// 1. Abstract Class Example
// ==========================

abstract class ThreeDObject {
    protected double dim1, dim2, dim3;

    abstract double wholeSurfaceArea();
    abstract double volume();
}

class Box extends ThreeDObject {
    Box(double l, double b, double h) {
        dim1 = l;
        dim2 = b;
        dim3 = h;
    }

    double wholeSurfaceArea() {
        return 2 * (dim1*dim2 + dim2*dim3 + dim3*dim1);
    }

    double volume() {
        return dim1 * dim2 * dim3;
    }
}

class Cube extends ThreeDObject {
    Cube(double side) {
        dim1 = dim2 = dim3 = side;
    }

    double wholeSurfaceArea() {
        return 6 * dim1 * dim1;
    }

    double volume() {
        return dim1 * dim1 * dim1;
    }
}

class Cylinder extends ThreeDObject {
    Cylinder(double radius, double height) {
        dim1 = radius;
        dim2 = height;
    }

    double wholeSurfaceArea() {
        return 2 * Math.PI * dim1 * (dim1 + dim2);
    }

    double volume() {
        return Math.PI * dim1 * dim1 * dim2;
    }
}

class Cone extends ThreeDObject {
    Cone(double radius, double height) {
        dim1 = radius;
        dim2 = height;
    }

    double wholeSurfaceArea() {
        double slantHeight = Math.sqrt(dim1*dim1 + dim2*dim2);
        return Math.PI * dim1 * (dim1 + slantHeight);
    }

    double volume() {
        return (1.0 / 3) * Math.PI * dim1 * dim1 * dim2;
    }
}

// ==========================
// 2. Interface + Inheritance
// ==========================

interface Department {
    void getData();
    void printData();
}

class Hostel {
    String hostelName, hostelLocation;
    int noOfRooms;

    void getHostelData() {
        // Logic for input
    }

    void printHostelData() {
        // Print logic
    }
}

class Student extends Hostel implements Department {
    String studentName, regNo, electiveSubject, depName, depHead;
    float avgMarks;

    public void getData() {
        // Input logic
    }

    public void printData() {
        // Output logic
    }
}

// ==========================
// 3. Package Example
// ==========================

// File: MathOps/Operations.java
/*
package MathOps;

public class Operations {
    public static int add(int a, int b) {
        return a + b;
    }

    public static int multiply(int a, int b) {
        return a * b;
    }
}
*/

// File: PackageTest.java
/*
import MathOps.Operations;
import java.util.Scanner;

public class PackageTest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt(), b = sc.nextInt();
        System.out.println("Sum: " + Operations.add(a, b));
        System.out.println("Product: " + Operations.multiply(a, b));
    }
}
*/

// ==========================
// 4. Factorial with Exception
// ==========================

public class Factorial {
    static long[] facts = new long[21];

    static long factorial(int x) {
        if (x < 0)
            throw new IllegalArgumentException("Value of x must be positive");
        if (x >= facts.length)
            throw new IllegalArgumentException("Result will overflow.");
        if (facts[x] != 0)
            return facts[x];
        facts[0] = 1;
        for (int i = 1; i <= x; i++) {
            facts[i] = facts[i - 1] * i;
        }
        return facts[x];
    }

    public static void main(String[] args) {
        System.out.println(factorial(5));
    }
}

// ==========================
// 5. Manual Exception Example
// ==========================

public class ThrowExample {
    public static void main(String[] args) {
        try {
            throw new ArithmeticException("Manually thrown exception");
        } catch (ArithmeticException e) {
            System.out.println("Caught Exception: " + e.getMessage());
        }
    }
}

// ==========================
// 6. 1D Array Sorting
// ==========================

import java.util.Arrays;

public class SortArray {
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 2, 1};
        Arrays.sort(arr);
        for (int num : arr)
            System.out.print(num + " ");
    }
}

// ==========================
// 7. Inheritance - Vehicle
// ==========================

class Vehicle {
    protected String licenceNumber, color, ownerName;
    protected int speed;

    void showData() {
        System.out.println("This is a vehicle class.");
    }
}

class Bus extends Vehicle {
    private String routeNo;

    Bus(String routeNo) {
        this.routeNo = routeNo;
    }

    void showData() {
        super.showData();
        System.out.println("Bus Route No: " + routeNo);
    }
}

class Car extends Vehicle {
    private String manufacturerName;

    Car(String manufacturerName) {
        this.manufacturerName = manufacturerName;
    }

    void showData() {
        super.showData();
        System.out.println("Car Manufacturer: " + manufacturerName);
    }
}

// ==========================
// 8. 2D Array Multiplication
// ==========================

public class MatrixMultiply {
    public static void main(String[] args) {
        int[][] A = {{1, 2}, {3, 4}};
        int[][] B = {{5, 6}, {7, 8}};
        int[][] result = new int[2][2];

        for (int i = 0; i < 2; i++)
            for (int j = 0; j < 2; j++)
                for (int k = 0; k < 2; k++)
                    result[i][j] += A[i][k] * B[k][j];

        for (int[] row : result) {
            for (int val : row)
                System.out.print(val + " ");
            System.out.println();
        }
    }
}

// ==========================
// 9. Telephone Billing System
// ==========================

import java.util.*;

class Call {
    boolean isSTD;
    int duration;

    Call(boolean isSTD, int duration) {
        this.isSTD = isSTD;
        this.duration = duration;
    }

    double calculateBill() {
        if (!isSTD)
            return Math.ceil(duration / 3.0);
        else
            return duration * 1.5;
    }
}

public class BillingSystem {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("STD call? true/false");
        boolean isSTD = sc.nextBoolean();
        System.out.println("Enter duration in minutes:");
        int duration = sc.nextInt();

        Call call = new Call(isSTD, duration);
        System.out.println("Call bill: " + call.calculateBill());
    }
}
